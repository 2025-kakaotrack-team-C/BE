# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle & Docker & EC2 - CI/CD

# main 브랜치에서 이벤트(push) 발생 시 workflow 실행
on:
  push:
    branches: [ "main" ]

jobs:
  build:

    # 우분투 제일 최신 버전을 런닝머신(서버)으로
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # 체크아웃
      - uses: actions/checkout@v4

      # JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
            java-version: '17'
            distribution: 'temurin'

      # 환경 변수 파일 만들기
      - name: make application-prod.properties
        run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.properties

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # 도커 로그인
      - name: docker login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # Docker 빌드
      - name: Docker Build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pin-server:latest .

      # 도커 push
      - name: Docker hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/pin-server


    # EC2 배포
      - name: Docker image pull & Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }} #pem 키
      # 최신 이미지 pull -> 실행 중인 모든 컨테이너 중지 -> 백그라운드에서 컨테이너 실행 (-d 백그라운드 모드, -p 포트 매핑)
      # -> 종료된 컨테이너 삭제 -> 사용하지 않는 모든 도커 이미지 강제 삭제
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/pin-server:latest
            sudo docker stop $(sudo docker ps -a -q) || true
            sudo docker run -d \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e MYSQL_DATABASE_URL=${{ secrets.MYSQL_DATABASE_URL }} \
              -e MYSQL_DATABASE_USERNAME=${{ secrets.MYSQL_DATABASE_USERNAME }} \
              -e MYSQL_DATABASE_PASSWORD=${{ secrets.MYSQL_DATABASE_PASSWORD }} \
              -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/pin-server:latest
            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q) || true
            sudo docker image prune -a -f